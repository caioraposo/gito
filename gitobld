#!/bin/sh

set -e

update_color_config() {
	case "$1" in
		always)
			enable_colors
			;;
		never)
			disable_colors
			;;
		auto)
			if [ -t 1 ]; then
				enable_colors
			else
				disable_colors
			fi
			;;
		*)
			return 1
			;;
	esac
}

enable_colors() {
	NORMAL="\033[1;0m"
	STRONG="\033[1;1m"
	RED="\033[1;31m"
	GREEN="\033[1;32m"
	YELLOW="\033[1;33m"
}

disable_colors() {
	NORMAL=""
	STRONG=""
	RED=""
	GREEN=""
	YELLOW=""
}

msg() {
	printf "%s\n" "$1"
}

warn() {
	printf "${YELLOW}Warning:${NORMAL} %s\n" "$1"
}

error() {
	printf "${RED}Error:${NORMAL} %s\n" "$1"
}

die() {
	[ "$#" -gt 0 ] && error $@
	exit 1
}

list_all_tools() {
	find library -type d ! -path library -exec basename {} \;
}

realpath() {
	if [ "${1#/}" != "$1" ]; then
		echo "$1"
	else
		echo "$PWD/$1"
	fi
}

docker_ensure_state() {
	[ -z "$1" ] && return 1

	_container_id=$1

	_state=$2

	case $_state in
		running | stopped )
			[ "$_state" = running ] && _state_cond=true || _state_cond=false
			[ "$_state_cond" = true ] && _rev_state_cond=false || _rev_state_cond=true

			if ! docker_container_exists $_container_id; then
				return 1
			fi

			_is_running=$(docker inspect -f '{{.State.Running}}' $_container_id 2>&1)

			if [ "$_is_running" = "$_rev_state_cond" ]; then
				case $_state in
					running)
						docker start $_container_id > /dev/null 2>&1
						;;
					stopped)
						docker stop $_container_id > /dev/null 2>&1
						;;
				esac

				sleep 10
			fi

			_is_running=$(docker inspect -f '{{.State.Running}}' $_container_id 2>&1)

			[ "$_is_running" = "$_state_cond" ] && return 0 || return 1
			;;

		*) return 1 ;;
	esac

}

docker_rm_if_exists() {
	[ -z "$1" ] && return

	_container_id=$1

	msg "Removing container '$_container_id'..."

	if docker_container_exists $_container_id; then
		docker_ensure_state $_container_id stopped
		docker rm $_container_id > /dev/null 2>&1
	else
		warn "Container '$_container_id' don't exist."
	fi
}

docker_container_exists() {
	if [ -z "$(docker ps --all --quiet --filter id=$1)" ]; then
		return 1
	else
		return 0
	fi
}

docker_image_exists() {
	docker inspect --type image $1 > /dev/null 2>&1
}

docker_obj_exists() {
	_type=$1
	[ -n "$2" ] && _id=$2 || return 1

	docker inspect --type $_type $_id > /dev/null 2>&1
}

docker_find_id() {
	[ -z "$1" ] && return 0

	docker ps --all --quiet --no-trunc --filter name=$1 >&1
}

build_image() {
	_image_tag=$1
	_df_dir=$2

	if [ -n "$BUILD_IMAGES" ] || ! docker_image_exists $_image_tag; then
		msg "Building '$_image_tag' at $_df_dir..."
		docker build --tag $_image_tag $_df_dir
	fi
}

build_base_image() {
	_build_args="--tag $BASE_IMAGE_TAG"

	if [ -n "$REBUILD_BASE_IMAGE" ] || ! docker_image_exists $BASE_IMAGE_TAG; then
		[ -z "$BUILD_NO_CACHE" ] && _build_args="$_build_args --no-cache"

		msg "Building '$BASE_IMAGE_TAG'..."
		docker build "$_build_args" base
	fi
}

create_container_is_required() {
	_container_id=$1

	[ -n "$FORCE_RECREATE" -o -z "$_container_id" ] && return

	msg "Starting '$_container_id' container..."

	if ! docker_ensure_state $_container_id running; then
		warn "Failed to start container '$_container_id'..."
		return
	fi

	return 1
}

run_abuild() {
	build_image $ABUILD_IMAGE build/abuild

	if create_container_is_required $ABUILD_CONTAINER; then
		docker_rm_if_exists $ABUILD_CONTAINER

		_workdir=/var/lib/abuild
		_repodest_dir="$_workdir"/packages
		_aports_dir="$_workdir"/aports

		_run_args=""

		if [ -n "$BUILD_OUTPUT_DIR" ]; then
			_run_args="
				$_run_args
				--user $(id -u):$(id -g)
				--group-add abuild
				--mount type=bind,src=$(realpath $BUILD_OUTPUT_DIR),dst=$_repodest_dir
				"
		else
			_run_args="$_run_args --mount src=$GITOBLD_VOLUME,dst=$_repodest_dir"
		fi

		msg "Creating '$ABUILD_CONTAINER_NAME' container..."

		docker run \
			--detach \
			--name $ABUILD_CONTAINER_NAME \
			--env APORTS_DIR=$_aports_dir \
			--mount type=bind,src=$PKG_DIRECTORY,dst=$_aports_dir,readonly \
			--mount type=bind,src=$PKG_PRIVKEY_PATH,dst=$_workdir/keys/${PKG_PRIVKEY_PATH##*/},readonly \
			--mount type=bind,src=$PKG_PUBKEY_PATH,dst=/etc/apk/keys/${PKG_PUBKEY_PATH##*/},readonly \
			$_run_args \
			$ABUILD_IMAGE tail -f /dev/null

		ABUILD_CONTAINER=$(docker_find_id $ABUILD_CONTAINER_NAME)
		save_env
	fi
}

stop_abuild() {
	[ -z "$ABUILD_CONTAINER" ] && return 1

	msg "Stopping container '"$ABUILD_CONTAINER"'..."
	docker_ensure_state $ABUILD_CONTAINER stopped
}

run_apk_server() {
	if ! docker_obj_exists network $GITOBLD_NETWORK; then
		msg "Creating '$GITOBLD_NETWORK' network..."
		docker network create $GITOBLD_NETWORK
	fi

	build_image $APK_SERVER_IMAGE build/apk-server

	if create_container_is_required $APK_SERVER_CONTAINER; then
		docker_rm_if_exists $APK_SERVER_CONTAINER

		_docker_args=""
		_http_root=/app/apk_server

		[ -n "$PKG_PUBKEY_PATH" ] && 
			_docker_args="$_docker_args --mount type=bind,src=$PKG_PUBKEY_PATH,dst=$_http_root/${PKG_PUBKEY_PATH##*/},readonly"

		[ -n "$GITOBLD_NETWORK" ] && _docker_args="$_docker_args --network $GITOBLD_NETWORK"

		if [ -n "$REPOSITORY_PATH" ]; then
			_docker_args="$_docker_args --mount type=bind,src=$(realpath $REPOSITORY_PATH),dst=$_http_root/packages,readonly"
		else
			_docker_args="$_docker_args --mount src=$GITOBLD_VOLUME,dst=$_http_root/packages,readonly"
		fi

		msg "Creating '$APK_SERVER_HOST' container..."

		docker run \
			--detach \
			--name $APK_SERVER_HOST \
			$_docker_args \
			$APK_SERVER_IMAGE

		APK_SERVER_CONTAINER=$(docker_find_id $APK_SERVER_HOST)
		save_env
	fi
}

stop_apk_server() {
	[ -z "$APK_SERVER_CONTAINER" ] && return 1

	msg "Stopping container '"$APK_SERVER_CONTAINER"'..."
	docker_ensure_state $APK_SERVER_CONTAINER stopped
}

apk_has() {
	ls ports/"$1"/APKBUILD > /dev/null 2>&1
}

apk_description() {
	grep '^pkgdesc=.*' ports/"$1"/APKBUILD | cut -d= -f2 | sed -e 's/^"\(.*\)"$/\1/g'
}

apk_version() {
	grep '^pkgver=.*' ports/"$1"/APKBUILD | cut -d= -f2
}

build_apks() {
	if [ -z "$BUILD_OUTPUT_DIR" ] && ! docker_obj_exists volume $GITOBLD_VOLUME; then
		msg "Creating '$GITOBLD_VOLUME' volume..."
		docker volume create $GITOBLD_VOLUME > /dev/null 2>&1
		save_env
	fi

	run_abuild

	_apk_build_args="-t"

	[ -n "$BUILD_DEPS" ] && _apk_build_args="$_apk_build_args -R"

	for apk_ in $@; do
		_apk_name=$1

		if ! apk_has "$_apk_name"; then
			error "The package '$_apk_name' don't exists at ports directory."
			return 1
		fi

		msg "Building package '$_apk_name'..."

		if [ -n "$BUILD_OUTPUT_DIR" ]; then
			_userid="$(id -u):$(id -g)"
		else
			_userid="abuild"
		fi

		docker exec \
			--interactive --tty \
			--user $_userid \
			$ABUILD_CONTAINER \
			apk-build $_apk_build_args $_apk_name
	done

	stop_abuild
}

apk_build_usage() {
	cat <<-EOF
		Usage: gitobld apk-build [-d PKG_DIRECTORY] PACKAGE...
		
		Build a Alpine package

		Options:
		    -b  Force build of 'abuild' image
		    -c  Recreate containers
		    -d  Search for apks on this directory (default: ports/)
		    -h  Show this help
		    -k  Set path to packager private key
		    -o  Set output directory
		    -p  Set path to packager public key
		    -R  Build APKBUILD depencies
	EOF

	exit 0
}

apk_build() {
	local OPTIND
	while getopts "bc:d:hk:o:p:R" opt; do
		case $opt in
			b) BUILD_IMAGES=1 ;;
			c) FORCE_RECREATE=1 ;;
			d) PKG_DIRECTORY=$OPTARG ;;
			h) apk_build_usage ;;
			k) PKG_PRIVKEY_PATH=$OPTARG ;;
			o) BUILD_OUTPUT_DIR=$OPTARG ;;
			p) PKG_PUBKEY_PATH=$OPTARG ;;
			R) BUILD_DEPS=1 ;;
		esac
	done

	shift $((OPTIND-1))

	if [ "$#" -eq 0 ]; then
		die "No packages passed to 'gitobld apk-build' command."
	fi

	[ "$1" = all ] && set -- $(list_all_tools)

	PKG_DIRECTORY=${PKG_DIRECTORY:-$PWD/ports}

	PKG_PRIVKEY_PATH=${PKG_PRIVKEY_PATH:-$PWD/keys/packager_key.rsa}
	PKG_PUBKEY_PATH=${PKG_PUBKEY_PATH:-$PKG_PRIVKEY_PATH.pub}

	build_apks $@
}

df_has() {
	ls library/"$1"/Dockerfile > /dev/null 2>&1
}

get_tool_tag() {
	if [ -n "$1" ] && apk_has $1; then
		echo "$REPOSITORY_USER"/"$1":$(apk_version $1)
	fi
}

build_tool_image() {
	_tool_name=$1
	_tool_tag=$(get_tool_tag $_tool_name)

	if [ -z "$_tool_tag" ]; then
		error "Invalid tool name '$_tool_name'"
		return 1
	fi

	if ! df_has $_tool_name; then
		error "No tool with '$_tool_name' name at library directory."
		return 1
	fi

	_build_args="--tag $_tool_tag"

	[ -n "$BUILD_NO_CACHE" ] && _build_args="$_build_args --no-cache"
	
	[ -n "$GITOBLD_NETWORK" ] && _build_args="$_build_args --network $GITOBLD_NETWORK"

	[ -n "$PKG_REPOSITORY" ] && _build_args="$_build_args --build-arg PKG_REPOSITORY=$PKG_REPOSITORY"
	[ -n "$PKG_PUBKEY_URL" ] && _build_args="$_build_args --build-arg PKG_PUBKEY_URL=$PKG_PUBKEY_URL"

	msg "Building Docker image for '$_tool_name'..."

	docker build $_build_args library/"$_tool_name"
}

update_tool_df() {
	[ -z "$1" ] && return 1

	_tool_name=$1

	if ! apk_has $_tool_name; then
		error "Missing package for '$_tool_name' at ports directory."
		return 1
	fi

	_tool_dir=library/$_tool_name

	msg "Updating '$_tool_name'..."

	mkdir -p $_tool_dir
	sed \
		-e 's/%%TOOL_NAME%%/'"$_tool_name"'/g' \
		-e 's/%%ALPINE_VERSION%%/'"$ALPINE_VERSION"'/g' \
		-e 's,%%PKG_PUBKEY_URL%%,'"$PKG_PUBKEY_URL"',g' \
		-e 's,%%PKG_PUBKEY%%,'"$PKG_PUBKEY"',g' \
		-e 's,%%PKG_REPOSITORY%%,'"$PKG_REPOSITORY"',g' \
		build/template/Dockerfile.template \
		> $_tool_dir/Dockerfile

	echo "  Added Dockerfile"

	if [ ! -f "$_tool_dir"/docker-entrypoint.sh ]; then
		cp build/template/docker-entrypoint.sh "$_tool_dir"
		echo "  Added docker-entrypoint.sh"
	fi

	if [ ! -f "$_tool_dir"/README.md ]; then
		sed \
			-e 's/%%TOOL_NAME%%/'"$_tool_name"'/g' \
			-e 's/%%TOOL_BADGES%%//g' \
			-e 's/%%TOOL_DESCRIPTION%%/'"$(apk_description $_tool_name)"'/g' \
			build/template/README.md \
			> $_tool_dir/README.md
		echo "  Added README.md"
	fi
}

build_usage() {
	cat <<-EOF
		Usage: gitobld build [OPTION]... all | TOOL...

		Update dockerfiles using a template

		Options:
		    -b  Rebuild 'apk-server' image, when using '-S' flag
		    -B  Rebuild 'gito' base image.
		    -c  Recreate containers
		    -d
		    -e  Set apk repository for tools
		    -h  Show this help
		    -k  Set private key path
		    -N  Do not use cache when building the image
		    -o  Set output directory, when using '-R' flag
		    -r  Set package repository path
		    -R  Build Alpine packages for tools
		    -S  Run local server for apks
		    -p  Set public key url
		    -P  Set public key path
		    -u  Set user name for image tags
	EOF

	exit 0
}

build() {
	while getopts "bBcd:e:hk:KNo:r:RPSu:" opt; do
		case $opt in
			b) BUILD_IMAGES=1 ;;
			B) BUILD_BASE_IMAGE=1 ;;
			c) FORCE_RECREATE=1 ;;
			d) PKG_DIRECTORY=$OPTARG ;;
			e) PKG_REPOSITORY=$OPTARG ;;
			h) build_usage ;;
			k) PKG_PRIVKEY_PATH=$OPTARG ;;
			N) BUILD_NO_CACHE=1 ;;
			o) BUILD_OUTPUT_DIR=$OPTARG ;;
			r) REPOSITORY_PATH=$OPTARG ;;
			R) _build_apks=1 ;;
			S) _run_server=1 ;;
			p) PKG_PUBKEY_URL=$OPTARG ;;
			P) PKG_PUBKEY_PATH=$OPTARG ;;
			u) REPOSITORY_USER=$OPTARG ;;
		esac
	done

	shift $((OPTIND-1))

	if [ "$#" -eq 0 ]; then
		die "No tools passed to 'gitobld build' command."
	fi

	[ "$1" = all ] && set -- $(list_all_tools)

	PKG_DIRECTORY=${PKG_DIRECTORY:-$PWD/ports}

	PKG_REPOSITORY=${PKG_REPOSITORY:-http://"$APK_SERVER_HOST"/packages/aports}

	PKG_PRIVKEY_PATH=${PKG_PRIVKEY_PATH:-$PWD/keys/packager_key.rsa}
	PKG_PUBKEY_PATH=${PKG_PUBKEY_PATH:-$PWD/keys/packager_key.rsa.pub}

	if [ -z "$PKG_PUBKEY_URL" -a -n "$_run_server" ]; then
		PKG_PUBKEY_URL='http://'"$APK_SERVER_HOST"'/'"${PKG_PUBKEY_PATH##*/}"
	fi

	REPOSITORY_USER=${REPOSITORY_USER:-gitobioinformatics}

	[ -n "$BUILD_BASE_IMAGE" ] && build_base_image

	if [ -n "$_build_apks" ]; then
		BUILD_DEPS=1 apk_build $@
	fi

	if [ -n "$BUILD_OUTPUT_DIR" -a -z "$REPOSITORY_PATH" ]; then
		REPOSITORY_PATH=$BUILD_OUTPUT_DIR
	fi

	[ -n "$_run_server" ] && run_apk_server

	for tool in $@; do
		build_tool_image $tool
	done

	[ -n "$_run_server" ] && stop_apk_server
}

clean() {
	if [ -n "$ABUILD_CONTAINER" ]; then
		docker_rm_if_exists $ABUILD_CONTAINER
	fi

	if [ -n "$APK_SERVER_CONTAINER" ]; then
		docker_rm_if_exists $APK_SERVER_CONTAINER
	fi

	ABUILD_CONTAINER=
	APK_SERVER_CONTAINER=

	save_env
}

push_usage() {
	cat <<-EOF
		Usage: gitobld push [OPTION]... all | TOOL...

		Send images to remote repository

		Options:
		    -h  Show this help
		    -l  Tag current version as 'latest', and push both tags to remote
		    -L  Tag current version as 'latest', and only push this tag
		    -r  Set remote repository
		    -u  Set user for images tags (default: gitobioinformatics)
	EOF

	exit 0
}

push_tool_image() {
	_tool_name=$1
	_tool_tag=$(get_tool_tag $1)

	if [ -z "$_tool_tag" ]; then
		error "Invalid tool name '$_tool_name'"
		return 1
	fi

	if ! docker_obj_exists image $_tool_tag; then
		error "Image for '$_tool_name' don't exists."
		return 1
	fi

	[ -z "$ONLY_SEND_LATEST" ] && _send_tags="$_tool_tag"

	if [ -n "$SEND_LATEST" -o -n "$ONLY_SEND_LATEST" ]; then
		_send_tags="$_send_tags ${_tool_tag%:*}:latest"
	fi

	if [ -n "$REMOTE_REPOSITORY" ]; then
		_send_tags=$(echo $_send_tags | sed -e 's,[^ ]* *,'"$REMOTE_REPOSITORY"'/&,g')
	fi

	msg "Pushing '$_tool_name' to '${REMOTE_REPOSITORY:-docker.io}'..."

	for tag in $_send_tags; do
		if [ "$tag" != "$_tool_tag" ]; then
			docker tag $_tool_tag $tag
		fi

		msg "Pushing '$tag'..."
		docker push $tag
	done
}

push() {
	local OPTIND
	while getopts "hlLr:u:" opt; do
		case $opt in
			h) push_usage ;;
			l) SEND_LATEST=1 ;;
			L) ONLY_SEND_LATEST=1 ;;
			r) REMOTE_REPOSITORY=$OPTARG ;;
			u) REPOSITORY_USER=$OPTARG ;;
		esac
	done

	shift $((OPTIND-1))

	if [ "$#" -eq 0 ]; then
		die "No tools passed to 'gitobld push' command."
	fi

	[ "$1" = all ] && set -- $(list_all_tools)

	REPOSITORY_USER=${REPOSITORY_USER:-gitobioinformatics}

	for tool in $@; do
		push_tool_image $tool
	done
}

updatedf_usage() {
	cat <<-EOF
		Usage: gitobld updatedf [OPTION]... all | TOOL...

		Update dockerfiles using a template

		Options:
		    -a  Set alpine version for dockerfiles (default: $ALPINE_VERSION)
		    -h  Show this help
		    -k  Set public key url for apks
		    -r  Set apk repository for tools
	EOF

	exit 0
}

updatedf() {
	ALPINE_VERSION=3.8

	local OPTIND
	while getopts "hk:r:" opt; do
		case $opt in
			a) ALPINE_VERSION=$OPTARG ;;
			h) updatedf_usage ;;
			k) PKG_PUBKEY_URL=$OPTARG ;;
			r) PKG_REPOSITORY=$OPTARG ;;
		esac
	done

	shift $((OPTIND-1))

	if [ "$#" -eq 0 ]; then
		die "No tools passed to 'gitobld updatedf' command."
	fi

	[ "$1" = all ] && set -- $(list_all_tools)

	for tool in $@; do
		update_tool_df $tool
	done
}

save_env() {
	cat <<-EOF > $GITOBLD_ENV
		ABUILD_CONTAINER=$ABUILD_CONTAINER

		APK_SERVER_CONTAINER=$APK_SERVER_CONTAINER
		APK_SERVER_HOST=$APK_SERVER_HOST

		GITOBLD_NETWORK=$GITOBLD_NETWORK
		GITOBLD_VOLUME=$GITOBLD_VOLUME
	EOF
}

usage() {
	cat <<-EOF
		Usage: gitobld [OPTIONS]... COMMAND [COMMAND OPTIONS]...
		       gitobld apk-build [PACKAGE]...
		       gitobld build [OPTIONS]... all | TOOL...
		       gitobld push [OPTIONS]... all | TOOL...
		       gitobld updatedf [OPTIONS]... all | TOOL...

		Helper script for building GITO images.

		Options:
		    -c {always,never,auto}  Set colored output configuration. (default: auto)
		    -e  Set path for gitobld environment file (default: .gitobld_env)
		    -h  Show this help

		Commands:
		    apk-build   Build a Alpine package
		    build       Build Docker image of tool
		    clean       Remove all containers created by gitobld
		    push        Send images to remote repository
		    updatedf    Update dockerfiles using a template

		Run 'gitobld COMMAND -h' for more information on a command.
	EOF

	exit 0
}

main() {
	while getopts "c:e:h" opt; do
		case $opt in
			c) GITOBLD_COLOR_CONFIG=$OPTARG ;;
			e) GITOBLD_ENV=$OPTARG ;;
			h) usage ;;
		esac
	done

	shift $((OPTIND-1))

	GITOBLD_COLOR_CONFIG=${GITOBLD_COLOR_CONFIG:-auto}

	if ! update_color_config $GITOBLD_COLOR_CONFIG; then
		die "Invalid color config $OPTARG"
	fi

	GITOBLD_ENV=${GITOBLD_ENV:-./.gitobld_env}

	if [ -f "$GITOBLD_ENV" ]; then
		. $GITOBLD_ENV
	fi

	BASE_IMAGE_TAG=${BASE_IMAGE_TAG:-gitobioinformatics/gito}

	ABUILD_IMAGE=${APK_SERVER_IMAGE:-gitobioinformatics/abuild}
	ABUILD_CONTAINER_NAME=${ABUILD_CONTAINER_NAME:-gitobld_abuild}

	APK_SERVER_IMAGE=${APK_SERVER_IMAGE:-gitobioinformatics/apk-server}
	APK_SERVER_HOST=${APK_SERVER_HOST:-gitobld_apk_server.local}

	GITOBLD_NETWORK=${GITOBLD_NETWORK:-gitobld-network}
	GITOBLD_VOLUME=${GITOBLD_VOLUME:-gitobld-volume}

	_cmd=${1:-build}

	[ "$#" -gt 0 ] && shift

	local OPTIND

	case $_cmd in
		apk-build) apk_build $@ ;;
		build) build $@ ;;
		clean) clean ;;
		push) push $@ ;;
		updatedf) updatedf $@ ;;
		*) echo "Invalid command '$_cmd'" ;;
	esac
}

main $@

