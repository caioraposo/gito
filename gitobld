#!/bin/sh

set -e

usage() {
	cat <<-EOF
		Usage: gitobld [OPTIONS]... COMMAND [COMMAND OPTIONS]...
		       gitobld apk-build [PACKAGE]...
		       gitobld build [OPTIONS]... base | all | TOOL...
		       gitobld push [OPTIONS]... base | all | TOOL...
		       gitobld updatedf [OPTIONS]... all | TOOL...

		Helper script for building GITO images.

		Options:
		    -c {always,never,auto}  Set colored output configuration. (default: auto)
		    -h  Show this help

		Commands:
		    apk-build   Build a Alpine package
		    build       Build Docker image of tool
		    push        Send images to remote repository
		    updatedf    Update dockerfiles using a template

		Run 'gitobld COMMAND -h' for more information on a command.
	EOF

	exit 0
}

main() {
	while getopts "c:e:h" opt; do
		case $opt in
			c) GITOBLD_COLOR_CONFIG=$OPTARG ;;
			h) usage ;;
		esac
	done

	shift $((OPTIND-1))

	GITOBLD_SCRIPTS=${GITOBLD_SCRIPTS:-$PWD/build/scripts}

	if [ ! -d "$GITOBLD_SCRIPTS" ]; then
		die "Directory '$GITOBLD_SCRIPTS' of 'gitobld' scripts don't exist."
	fi

	export PATH="$PATH:$GITOBLD_SCRIPTS"
	export GITOBLD_COLOR_CONFIG=${GITOBLD_COLOR_CONFIG:-auto}
	export GITOBLD_COMMON="$GITOBLD_SCRIPTS"/gitobld-common

	. gitobld-common

	[ -z "$1" ] && usage

	subcommand="$1"

	[ "$#" -gt 0 ] && shift

	export COMMAND="$program $subcommand"

	case "$subcommand" in
		apk-build) gitobld-apk-build $@ ;;
		build) gitobld-build $@ ;;
		push) gitobld-push $@ ;;
		updatedf) gitobld-updatedf $@ ;;
		*) die "Invalid subcommand '$subcommand'" ;;
	esac
}

main $@

