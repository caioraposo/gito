#!/bin/sh

set -e

_all_tools="
	bowtie2
	fastqc
	sra-tools
	trimmomatic
	trinity
	"

die() {
	[ "$#" -gt 0 ] && echo $@
	exit 1
}

docker_run_if_stopped() {
	[ -z "$1" ] && return 1

	_container_id=$1

	if ! docker_container_exists $_container_id; then
		return 1
	fi

	_is_running=$(docker inspect -f '{{.State.Running}}' $_container_id 2>&1)

	if [ "$_is_running" = false ]; then
		docker start $_container_id > /dev/null 2>&1
		sleep 5
	fi

	_is_running=$(docker inspect -f '{{.State.Running}}' $_container_id 2>&1)

	[ "$_is_running" = true ] && return 0 || return 1
}

docker_rm_if_exists() {
	[ -z "$1" ] && return

	if docker_container_exists $1; then
		docker rm $1
	fi
}

docker_container_exists() {
	if [ -z "$(docker ps --all --quiet --filter id=$1)" ]; then
		return 1
	else
		return 0
	fi
}

docker_find_id() {
	[ -z "$1" ] && return 0

	docker ps --all --quiet --no-trunc --filter name=$1 >&1
}

run_abuild() {
	if ! docker_run_if_stopped $ABUILD_CONTAINER; then
		docker_rm_if_exists $ABUILD_CONTAINER

		docker run \
			--detach \
            --env USERID=$USERID \
			--name $ABUILD_CONTAINER_NAME \
			--mount type=bind,src=$PWD,dst=/var/lib/abuild \
            --mount type=bind,src=$PKG_PUBKEY_PATH,dst=/etc/apk/keys/${PKG_PUBKEY_PATH##*/} \
			$ABUILD_IMAGE tail -f /dev/null

		ABUILD_CONTAINER=$(docker_find_id $ABUILD_CONTAINER_NAME)
	fi
}

apk_has() {
	ls ports/"$1"/APKBUILD > /dev/null 2>&1
}

apk_version() {
	grep 'pkgver=.*' ports/"$1"/APKBUILD | cut -d= -f2
}

apk_build_usage() {
	cat <<-EOF
		Usage: gitobld apk-build [-d PKG_DIRECTORY] [-u USERID] PACKAGE...
		
		Build a Alpine package

		Options:
		    -d  Search for apks on this directory (default: ports/)
		    -h  Show this help
            -k  Set path to packager public key
            -u  Set user id for running abuild (default: current user)

	EOF

	exit 0
}

apk_build() {
	export OPTIND=
	while getopts "d:hk:u:" opt; do
		case $opt in
			d) PKG_DIRECTORY=$OPTARG ;;
			h) apk_build_usage ;;
            k) PKG_PUBKEY_PATH=$OPTARG ;;
            u) USERID=$OPTARG ;;
		esac
	done

	PKG_DIRECTORY=${PKG_DIRECTORY:-ports}
    PKG_PUBKEY_PATH=${PKG_PUBKEY_PATH:-$PWD/keys/packager_key.rsa.pub}
    USERID=${USERID:-$(id -u)}

	shift $((OPTIND-1))

	[ "$#" -eq 0 ] && die ""

    while [ "$#" -gt 0 ]; do
        _apk_name=$1

        if ! apk_has "$_apk_name"; then
            die ""
        fi

        run_abuild
        docker exec --tty --user $USERID $ABUILD_CONTAINER apk-build $_apk_name

        shift
    done
}

apk_server_usage() {
	cat <<-EOF
		Usage: gitobld apk-server [-n DOCKER_NETWORK] ADDRESS
		
		Run local file server for development

		Options:
		    -h  Show this help
		    -n  Set docker network used by local apk server
		        (default: gitobld-server)
	EOF

	exit 0
}

apk_server() {
    export OPTIND=
    while getopts "hn:" opt; do
        case $opt in 
            h) apk_server_usage ;;
            n) DOCKER_NETWORK=$OPTARG ;;
        esac
    done

    shift $((OPTIND-1))

	[ "$#" -gt 1 ] && die ""
	[ "$#" -eq 1 ] && APK_SERVER_HOST=$1

	if ! docker_run_if_stopped $APK_SERVER_CONTAINER; then
		docker_rm_if_exists $APK_SERVER_CONTAINER

		_docker_args=""

		[ -n "$DOCKER_NETWORK" ] && _docker_args="$_docker_args --network $DOCKER_NETWORK"

		docker run \
			--detach \
			--name $APK_SERVER_HOST \
			--mount type=bind,src=$PWD,dst=/app/apk_server \
			$_docker_args \
			$APK_SERVER_IMAGE

		APK_SERVER_CONTAINER=$(docker_find_id $APK_SERVER_HOST)
	fi
}

df_has() {
	ls tools/"$1"/Dockerfile > /dev/null 2>&1
}

df_build() {
	[ -z "$1" ] && die ""

    _tool_name=$1

	if ! df_has $_tool_name; then
		die ""
	fi

	if ! apk_has $_tool_name; then
		die ""
	fi

	_tool_tag="$REPOSITORY_USER"/"$_tool_name":$(apk_version $_tool_name)

	_build_args="--tag $_tool_tag"
	
	[ -n "$DOCKER_NETWORK" ] && _build_args="$_build_args --network $DOCKER_NETWORK"

	[ -n "$PKG_REPOSITORY" ] && _build_args="$_build_args --build-arg PKG_REPOSITORY=$PKG_REPOSITORY"
	[ -n "$PKG_PUBKEY_URL" ] && _build_args="$_build_args --build-arg PKG_PUBKEY_URL=$PKG_PUBKEY_URL"

	docker build $_build_args tools/"$_tool_name"
}

df_update() {
	[ -z "$1" ] && die ""

	_tool_name=$1
	_tools_dir=tools/$_tool_name

	mkdir -p $_tools_dir
	sed \
		-e 's/%%TOOL_NAME%%/'"$_tool_name"'/g' \
		-e 's/%%ALPINE_VERSION%%/'"$ALPINE_VERSION"'/g' \
		-e 's,%%PKG_PUBKEY_URL%%,'"$PKG_PUBKEY_URL"',g' \
		-e 's,%%PKG_PUBKEY%%,'"$PKG_PUBKEY"',g' \
		-e 's,%%PKG_REPOSITORY%%,'"$PKG_REPOSITORY"',g' \
		Dockerfile.template \
		> $_tools_dir/Dockerfile
}

build_usage() {
	cat <<-EOF
		Usage: gito-bld build [OPTION]... all | TOOL...

		Update dockerfiles using a template

		Options:
		    -h  Show this help
		    -k  Set public key url for apks
		    -n  Set docker network used by local apk server
		        (default: gitobld-server)
		    -r  Set apk repository for tools
	EOF

	exit 0
}

build() {
	export OPTIND=
	while getopts "hk:n:r:u:" opt; do
		case $opt in
			h) build_usage ;;
			k) PKG_PUBKEY_URL=$OPTARG ;;
			n) DOCKER_NETWORK=$OPTARG ;;
			r) PKG_REPOSITORY=$OPTARG ;;
			u) REPOSITORY_USER=$OPTARG ;;
		esac
	done

    PKG_REPOSITORY=${PKG_REPOSITORY:-'http://'"$APK_SERVER_HOST"'/packages/ports'}
    PKG_PUBKEY_URL=${PKG_PUBKEY_URL:-'http://'"$APK_SERVER_HOST"'/keys/packager_key.rsa.pub'}

	REPOSITORY_USER=${REPOSITORY_USER:-gitobioinformatics}

	shift $((OPTIND-1))
	
	[ "$1" = all ] && set -- $_all_tools

	for tool in $@; do
		df_build $tool
	done
}

stop_() {
	if [ -n "$ABUILD_CONTAINER" ] && docker_container_exists $ABUILD_CONTAINER; then
		docker stop $ABUILD_CONTAINER > /dev/null 2>&1
	fi

	if [ -n "$APK_SERVER_CONTAINER" ] && docker_container_exists $APK_SERVER_CONTAINER; then
		docker stop $APK_SERVER_CONTAINER > /dev/null 2>&1
	fi
}

updatedf_usage() {
	cat <<-EOF
		Usage: gito-bld updatedf [OPTION]... all | TOOL...

		Update dockerfiles using a template

		Options:
		    -a  Set alpine version for dockerfiles (default: 3.8)
		    -h  Show this help
		    -k  Set public key url for apks
		    -r  Set apk repository for tools
		    -u  Set user for images tags (default: gitobioinformatics)
	EOF

	exit 0
}

updatedf() {
	export OPTIND=
	while getopts "hk:r:" opt; do
		case $opt in
			a) ALPINE_VERSION=$OPTARG ;;
			h) updatedf_usage ;;
			k) PKG_PUBKEY_URL=$OPTARG ;;
			r) PKG_REPOSITORY=$OPTARG ;;
		esac
	done

	shift $((OPTIND-1))

	[ "$1" = all ] && set -- $_all_tools

	ALPINE_VERSION=${ALPINE_VERSION:-3.8}

	for tool in $@; do
		df_update $tool
	done
}

save_env() {
	cat <<-EOF > $GITOBLD_ENV
		ABUILD_CONTAINER=$ABUILD_CONTAINER
		APK_SERVER_CONTAINER=$APK_SERVER_CONTAINER
		APK_SERVER_HOST=$APK_SERVER_HOST
	EOF
}

usage() {
	cat <<-EOF
		Usage: gitobld [OPTIONS]... COMMAND [COMMAND OPTIONS]...
		       gitobld apk-build [-d] [PACKAGE]...
		       gitobld apk-server [-n] [ADDRESS]
		       gitobld build [OPTIONS]... all | TOOL...
		       gitobld updatedf [OPTIONS]... all | TOOL...

		Helper script for building GITO images.

		Options:
		    -e  Set path for gitobld environment file (default: .gitobld_env)
		    -h  Show this help

		Commands:
		    apk-build   Build a Alpine package
		    apk-server  Run local file server for development
		    build       Build Docker image of tool
		    stop        Stop all containers on gitobld environment file
		    updatedf    Update dockerfiles using a template

		Run 'gitobld COMMAND -h' for more information on a command.
	EOF

	exit 0
}


main() {
	_cmd=${1:-build}

	shift 1

	case $_cmd in
		apk-build) apk_build $@ ;;
		apk-server) apk_server $@ ;;
		build) build $@ ;;
		stop) stop_ ;;
		updatedf) updatedf $@ ;;
	esac

	save_env
}

while getopts "e:chm" opt; do
	case $opt in
		e) GITOBLD_ENV=$OPTARG ;;
		h) usage ;;
	esac
done

GITOBLD_ENV=${GITOBLD_ENV:-./.gitobld_env}

if [ -f "$GITOBLD_ENV" ]; then
	. $GITOBLD_ENV
fi

ABUILD_IMAGE=${APK_SERVER_IMAGE:-gitobioinformatics/abuild}
ABUILD_CONTAINER_NAME=${ABUILD_CONTAINER_NAME:-gitobld_abuild}

APK_SERVER_IMAGE=${APK_SERVER_IMAGE:-gitobioinformatics/apk-server}
APK_SERVER_HOST=${APK_SERVER_HOST:-gitobld_apk_server.local}

main $@

