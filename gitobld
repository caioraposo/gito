#!/bin/sh

set -e

die() {
	[ "$#" -gt 0 ] && echo $@
	exit 1
}

list_all_tools() {
	find tools -type d ! -path tools -exec basename {} \;
}

docker_ensure_state() {
	[ -z "$1" ] && return 1

	_container_id=$1

	_state=$2

	case $_state in
		running | stopped )
			[ "$_state" = running ] && _state_cond=true || _state_cond=false
			[ "$_state_cond" = true ] && _rev_state_cond=false || _rev_state_cond=true

			if ! docker_container_exists $_container_id; then
				return 1
			fi

			_is_running=$(docker inspect -f '{{.State.Running}}' $_container_id 2>&1)

			if [ "$_is_running" = "$_rev_state_cond" ]; then
				case $_state in
					running)
						docker start $_container_id > /dev/null 2>&1
						;;
					stopped)
						docker stop $_container_id > /dev/null 2>&1
						;;
				esac
				sleep 10
			fi

			_is_running=$(docker inspect -f '{{.State.Running}}' $_container_id 2>&1)

			[ "$_is_running" = "$_state_cond" ] && return 0 || return 1
			;;

		*) return 1 ;;
	esac

}

docker_rm_if_exists() {
	[ -z "$1" ] && return

	if docker_container_exists $1; then
		docker rm $1
	fi
}

docker_container_exists() {
	if [ -z "$(docker ps --all --quiet --filter id=$1)" ]; then
		return 1
	else
		return 0
	fi
}

docker_image_exists() {
	docker inspect --type image $1 > /dev/null 2>&1
}

docker_obj_exists() {
	_type=$1
	[ -n "$2" ] && _id=$2 || return 1

	docker inspect --type $_type $_id > /dev/null 2>&1
}

docker_find_id() {
	[ -z "$1" ] && return 0

	docker ps --all --quiet --no-trunc --filter name=$1 >&1
}

run_abuild() {
	if [ -n "$BUILD_IMAGES" ] || ! docker_image_exists $ABUILD_IMAGE; then
		docker build --tag $ABUILD_IMAGE build/abuild
	fi

	if [ -z "$ABUILD_CONTAINER" ] || ! docker_ensure_state $ABUILD_CONTAINER running; then
		docker_rm_if_exists $ABUILD_CONTAINER

		_workdir=/var/lib/abuild
		_repodest_dir="$_workdir"/packages
		_aports_dir="$_workdir"/aports

		docker run \
			--detach \
			--name $ABUILD_CONTAINER_NAME \
			--mount src=$GITOBLD_VOLUME,dst=$_repodest_dir \
			--mount type=bind,src=$PKG_DIRECTORY,dst=$_aports_dir,readonly \
			--mount type=bind,src=$PKG_PRIVKEY_PATH,dst=$_workdir/keys/${PKG_PRIVKEY_PATH##*/},readonly \
			--mount type=bind,src=$PKG_PUBKEY_PATH,dst=/etc/apk/keys/${PKG_PUBKEY_PATH##*/},readonly \
			$ABUILD_IMAGE tail -f /dev/null

		ABUILD_CONTAINER=$(docker_find_id $ABUILD_CONTAINER_NAME)
		save_env
	fi
}

stop_abuild() {
	[ -z "$ABUILD_CONTAINER" ] && return 1

	docker_ensure_state $ABUILD_CONTAINER stopped
}

run_apk_server() {
	if ! docker_obj_exists network $GITOBLD_NETWORK; then
		docker network create $GITOBLD_NETWORK
	fi

	if [ -n "$BUILD_IMAGES" ] || ! docker_image_exists $APK_SERVER_IMAGE; then
		docker build --tag $APK_SERVER_IMAGE build/apk-server
	fi

	if [ -z "$APK_SERVER_CONTAINER" ] || ! docker_ensure_state $APK_SERVER_CONTAINER running; then
		docker_rm_if_exists $APK_SERVER_CONTAINER

		_docker_args=""
		_http_root=/app/apk_server

		[ -n "$PKG_PUBKEY_PATH" ] && 
			_docker_args="$_docker_args --mount type=bind,src=$PKG_PUBKEY_PATH,dst=$_http_root/${PKG_PUBKEY_PATH##*/},readonly"

		[ -n "$GITOBLD_NETWORK" ] && _docker_args="$_docker_args --network $GITOBLD_NETWORK"

		docker run \
			--detach \
			--name $APK_SERVER_HOST \
			--mount src=$GITOBLD_VOLUME,dst=$_http_root/packages,readonly \
			$_docker_args \
			$APK_SERVER_IMAGE

		APK_SERVER_CONTAINER=$(docker_find_id $APK_SERVER_HOST)

		save_env
	fi
}

stop_apk_server() {
	[ -z "$APK_SERVER_CONTAINER" ] && return 1

	docker_ensure_state $APK_SERVER_CONTAINER stopped
}

apk_has() {
	ls ports/"$1"/APKBUILD > /dev/null 2>&1
}

apk_version() {
	grep '^pkgver=.*' ports/"$1"/APKBUILD | cut -d= -f2
}

build_apks() {
	if ! docker_obj_exists volume $GITOBLD_VOLUME; then
		docker volume create $GITOBLD_VOLUME > /dev/null 2>&1
		save_env
	fi

	run_abuild

	for apk_ in $@; do
		_apk_name=$1

		if ! apk_has "$_apk_name"; then
			die ""
		fi

		docker exec \
			--interactive --tty \
			--user abuild $ABUILD_CONTAINER \
			apk-build -t $_apk_name
	done

	stop_abuild
}

apk_build_usage() {
	cat <<-EOF
		Usage: gitobld apk-build [-d PKG_DIRECTORY] PACKAGE...
		
		Build a Alpine package

		Options:
		    -B  Force build of 'abuild' image
		    -d  Search for apks on this directory (default: ports/)
		    -h  Show this help
		    -k  Set path to packager private key
		    -p  Set path to packager public key

	EOF

	exit 0
}

apk_build() {
	local OPTIND
	while getopts "Bd:hk:p:" opt; do
		case $opt in
			B) BUILD_IMAGES=1 ;;
			d) PKG_DIRECTORY=$OPTARG ;;
			h) apk_build_usage ;;
			k) PKG_PRIVKEY_PATH=$OPTARG ;;
			p) PKG_PUBKEY_PATH=$OPTARG ;;
		esac
	done

	shift $((OPTIND-1))

	PKG_DIRECTORY=${PKG_DIRECTORY:-$PWD/ports}

	PKG_PRIVKEY_PATH=${PKG_PRIVKEY_PATH:-$PWD/keys/packager_key.rsa}
	PKG_PUBKEY_PATH=${PKG_PUBKEY_PATH:-$PKG_PRIVKEY_PATH.pub}

	if [ -z "$PKG_PRIVKEY_PATH" -o -z "$PKG_PUBKEY_PATH" ]; then
		die ""
	fi

	[ "$#" -eq 0 ] && die ""

	build_apks $@
}

df_has() {
	ls tools/"$1"/Dockerfile > /dev/null 2>&1
}

build_image() {
	[ -z "$1" ] && die ""

	_tool_name=$1

	if ! df_has $_tool_name; then
		die ""
	fi

	if ! apk_has $_tool_name; then
		die ""
	fi

	_tool_tag="$REPOSITORY_USER"/"$_tool_name":$(apk_version $_tool_name)

	_build_args="--tag $_tool_tag"

	[ -n "$BUILD_NO_CACHE" ] && _build_args="$_build_args --no-cache"
	
	[ -n "$GITOBLD_NETWORK" ] && _build_args="$_build_args --network $GITOBLD_NETWORK"

	[ -n "$PKG_REPOSITORY" ] && _build_args="$_build_args --build-arg PKG_REPOSITORY=$PKG_REPOSITORY"
	[ -n "$PKG_PUBKEY_URL" ] && _build_args="$_build_args --build-arg PKG_PUBKEY_URL=$PKG_PUBKEY_URL"

	docker build $_build_args tools/"$_tool_name"
}

df_update() {
	[ -z "$1" ] && die ""

	_tool_name=$1
	_tools_dir=tools/$_tool_name

	mkdir -p $_tools_dir
	sed \
		-e 's/%%TOOL_NAME%%/'"$_tool_name"'/g' \
		-e 's/%%ALPINE_VERSION%%/'"$ALPINE_VERSION"'/g' \
		-e 's,%%PKG_PUBKEY_URL%%,'"$PKG_PUBKEY_URL"',g' \
		-e 's,%%PKG_PUBKEY%%,'"$PKG_PUBKEY"',g' \
		-e 's,%%PKG_REPOSITORY%%,'"$PKG_REPOSITORY"',g' \
		Dockerfile.template \
		> $_tools_dir/Dockerfile
}

build_usage() {
	cat <<-EOF
		Usage: gitobld build [OPTION]... all | TOOL...

		Update dockerfiles using a template

		Options:
		    -B  Force build of 'apk-server', when using 'S' flag
		    -d
		    -e  Set apk repository for tools
		    -h  Show this help
		    -K  Set private key path
		    -N  Do not use cache when building the image
		    -R  Build Alpine packages for tools
		    -S  Run local server for apks
		    -p  Set public key url
		    -P  Set public key path
		    -u  Set user name for image tags
	EOF

	exit 0
}

build() {
	while getopts "Bd:e:hK:NRPSu:" opt; do
		case $opt in
			B) BUILD_IMAGES=1 ;;
			d) PKG_DIRECTORY=$OPTARG ;;
			e) PKG_REPOSITORY=$OPTARG ;;
			h) build_usage ;;
			k) PKG_PRIVKEY_PATH=$OPTARG ;;
			N) BUILD_NO_CACHE=1 ;;
			R) _build_apks=1 ;;
			S) _run_server=1 ;;
			p) PKG_PUBKEY_URL=$OPTARG ;;
			P) PKG_PUBKEY_PATH=$OPTARG ;;
			u) REPOSITORY_USER=$OPTARG ;;
		esac
	done

	shift $((OPTIND-1))

	PKG_DIRECTORY=${PKG_DIRECTORY:-$PWD/ports}

	PKG_REPOSITORY=${PKG_REPOSITORY:-'http://'"$APK_SERVER_HOST"'/packages/aports'}

	PKG_PRIVKEY_PATH=${PKG_PRIVKEY_PATH:-$PWD/keys/packager_key.rsa}
	PKG_PUBKEY_PATH=${PKG_PUBKEY_PATH:-$PWD/keys/packager_key.rsa.pub}

	if [ -z "$PKG_PUBKEY_URL" -a -n "$_run_server" ]; then
		PKG_PUBKEY_URL='http://'"$APK_SERVER_HOST"'/'"${PKG_PUBKEY_PATH##*/}"
	fi

	REPOSITORY_USER=${REPOSITORY_USER:-gitobioinformatics}

	[ "$1" = all ] && set -- $(list_all_tools)

	if [ -n "$_build_apks" ]; then
		apk_build $@
	fi

	[ -n "$_run_server" ] && run_apk_server

	for tool in $@; do
		build_image $tool
	done

	[ -n "$_run_server" ] && stop_apk_server
}

stop_() {
	if [ -n "$ABUILD_CONTAINER" ] && docker_container_exists $ABUILD_CONTAINER; then
		docker stop $ABUILD_CONTAINER > /dev/null 2>&1
	fi

	if [ -n "$APK_SERVER_CONTAINER" ] && docker_container_exists $APK_SERVER_CONTAINER; then
		docker stop $APK_SERVER_CONTAINER > /dev/null 2>&1
	fi
}

updatedf_usage() {
	cat <<-EOF
		Usage: gitobld updatedf [OPTION]... all | TOOL...

		Update dockerfiles using a template

		Options:
		    -a  Set alpine version for dockerfiles (default: $ALPINE_VERSION)
		    -h  Show this help
		    -k  Set public key url for apks
		    -r  Set apk repository for tools
		    -u  Set user for images tags (default: gitobioinformatics)
	EOF

	exit 0
}

updatedf() {
	ALPINE_VERSION=3.8

	while getopts "hk:r:" opt; do
		case $opt in
			a) ALPINE_VERSION=$OPTARG ;;
			h) updatedf_usage ;;
			k) PKG_PUBKEY_URL=$OPTARG ;;
			r) PKG_REPOSITORY=$OPTARG ;;
		esac
	done

	shift $((OPTIND-1))

	[ "$1" = all ] && set -- $(list_all_tools)

	for tool in $@; do
		df_update $tool
	done
}

save_env() {
	cat <<-EOF > $GITOBLD_ENV
		ABUILD_CONTAINER=$ABUILD_CONTAINER

		APK_SERVER_CONTAINER=$APK_SERVER_CONTAINER
		APK_SERVER_HOST=$APK_SERVER_HOST

		GITOBLD_NETWORK=$GITOBLD_NETWORK
		GITOBLD_VOLUME=$GITOBLD_VOLUME
	EOF
}

usage() {
	cat <<-EOF
		Usage: gitobld [OPTIONS]... COMMAND [COMMAND OPTIONS]...
		       gitobld apk-build [-d] [PACKAGE]...
		       gitobld build [OPTIONS]... all | TOOL...
		       gitobld updatedf [OPTIONS]... all | TOOL...

		Helper script for building GITO images.

		Options:
		    -e  Set path for gitobld environment file (default: .gitobld_env)
		    -h  Show this help

		Commands:
		    apk-build   Build a Alpine package
		    build       Build Docker image of tool
		    stop        Stop all containers on gitobld environment file
		    updatedf    Update dockerfiles using a template

		Run 'gitobld COMMAND -h' for more information on a command.
	EOF

	exit 0
}


main() {
	while getopts "e:h" opt; do
		case $opt in
			e) GITOBLD_ENV=$OPTARG ;;
			h) usage ;;
		esac
	done

	shift $((OPTIND-1))

	GITOBLD_ENV=${GITOBLD_ENV:-./.gitobld_env}

	if [ -f "$GITOBLD_ENV" ]; then
		. $GITOBLD_ENV
	fi

	ABUILD_IMAGE=${APK_SERVER_IMAGE:-gitobioinformatics/abuild}
	ABUILD_CONTAINER_NAME=${ABUILD_CONTAINER_NAME:-gitobld_abuild}

	APK_SERVER_IMAGE=${APK_SERVER_IMAGE:-gitobioinformatics/apk-server}
	APK_SERVER_HOST=${APK_SERVER_HOST:-gitobld_apk_server.local}

	GITOBLD_NETWORK=${GITOBLD_NETWORK:-gitobld-network}
	GITOBLD_VOLUME=${GITOBLD_VOLUME:-gitobld-volume}

	_cmd=${1:-build}

	[ "$#" -gt 0 ] && shift

	local OPTIND

	case $_cmd in
		apk-build) apk_build $@ ;;
		build) build $@ ;;
		stop) stop_ ;;
		updatedf) updatedf $@ ;;
	esac
}

main $@

