#!/bin/sh

abuild_exec() {
	# TODO: Change to container id.

	docker exec \
		--interactive --tty \
		--user ${RUN_AS_USER:-abuild} \
		$ABUILD_CONTAINER_NAME $@
}

abuild_run() {
	if [ -z "$BUILD_OUTPUT_DIR" ] && ! gitobld-docker -qet volume "$GITOBLD_VOLUME"; then
		echo "Creating '$GITOBLD_VOLUME' volume..."

		gitobld-docker -qct volume "$GITOBLD_VOLUME"
		export GITOBLD_VOLUME
		gitobld-env -w
	fi

	gitobld-docker -be $rebuild_image_opt "$ABUILD_IMAGE" build/abuild

	repodest=/app/packages
	aportsdir=/app/aports

	runargs=""

	if [ -n "$RUN_AS_USER" ] && [ "$RUN_AS_USER" != 'abuild' ]; then
		runargs="$runargs --group-add abuild"
	fi

	if [ -n "$BUILD_OUTPUT_DIR" ]; then
		runargs="$runargs --mount type=bind,src=$(gitobld-realpath "$BUILD_OUTPUT_DIR"),dst=$repodest"
	else
		runargs="$runargs --mount src=$GITOBLD_VOLUME,dst=$repodest"
	fi

	runargs="
		$runargs
		--mount type=bind,src=$PKG_DIRECTORY,dst=$aportsdir,readonly
		--mount type=bind,src=$PKG_PRIVKEY_PATH,dst=/app/keys/${PKG_PRIVKEY_PATH##*/},readonly
		--mount type=bind,src=$PKG_PUBKEY_PATH,dst=/etc/apk/keys/${PKG_PUBKEY_PATH##*/},readonly
		"

	gitobld-docker -xe $force_recreate_opt "$ABUILD_CONTAINER_NAME" \
		$runargs "$ABUILD_IMAGE" tail -f /dev/null
	ABUILD_CONTAINER=$(gitobld-docker -it container "$ABUILD_CONTAINER_NAME")

	export ABUILD_CONTAINER
	gitobld-env -w
}

abuild_stop() {
	container_id=$(gitobld-docker -it container "$ABUILD_CONTAINER_NAME")

	if [ -n "$container_id" ] ; then
		echo "Stopping container '"$ABUILD_CONTAINER_NAME"'..."
		gitobld-docker -qs stopped "$container_id"
	fi
}

ABUILD_IMAGE=${APK_SERVER_IMAGE:-gitobioinformatics/abuild}
ABUILD_CONTAINER_NAME=${ABUILD_CONTAINER_NAME:-gitobld-abuild}

PKG_DIRECTORY=${PKG_DIRECTORY:-$PWD/ports}

PKG_PRIVKEY_PATH=${PKG_PRIVKEY_PATH:-$PWD/keys/packager_key.rsa}
PKG_PUBKEY_PATH=${PKG_PUBKEY_PATH:-$PKG_PRIVKEY_PATH.pub}

GITOBLD_VOLUME=${GITOBLD_VOLUME:-gitobld-volume}

while getopts "bcers" opt; do
	case $opt in
		b) rebuild_image_opt='-f' ;;
		c) force_recreate_opt='-f' ;;
		e) command_opt='-e' ;;
		r) command_opt='-r' ;;
		s) command_opt='-s' ;;
	esac
done

shift $((OPTIND-1))

command_opt=${command_opt:-'-r'}

case $command_opt in
	-e) abuild_exec $@ ;;
	-r) abuild_run ;;
	-s) abuild_stop ;;
esac

