#!/bin/sh

container_set_state() {
	[ -z "$1" ] && return 1

	_container_id=$1
	state=$2

	case $state in
		running | stopped )
			[ "$state" = running ] && _state_cond=true || _state_cond=false
			[ "$_state_cond" = true ] && _rev_state_cond=false || _rev_state_cond=true

			if ! docker_obj_exists "$_container_id"; then
				return 1
			fi

			_is_running=$(docker inspect -f '{{.State.Running}}' $_container_id 2>&1)

			if [ "$_is_running" = "$_rev_state_cond" ]; then
				case $state in
					running)
						docker start $_container_id > /dev/null 2>&1
						;;
					stopped)
						docker stop $_container_id > /dev/null 2>&1
						;;
				esac

				sleep 10
			fi

			_is_running=$(docker inspect -f '{{.State.Running}}' $_container_id 2>&1)

			[ "$_is_running" = "$_state_cond" ] && return 0 || return 1
			;;

		*) return 1 ;;
	esac
}

container_run() {
	[ -z "$1" ] && return 1

	container_name="$1"
	shift

	OBJECT_TYPE=container

	if docker_obj_exists $container_name; then
		if [ -n "$FORCE_OPERATION" ]; then
			docker_obj_delete "$container_name"
		elif [ -n "$CHECK_IF_EXISTS" ]; then
			container_id=$(docker_find_id "$container_name")

			if [ -n "$container_id" ]; then
				echo "Starting '$container_name' container..."
				container_set_state "$container_id" running

				if [ "$?" -ne 0 ]; then
					echo "Failed to start container '$container_name'"
				else
					return 0
				fi
			fi
		else
			echo "Container '$container_name' already exists"
			return 1
		fi
	fi

	docker_args="$@"

	if [ -n "$RUN_AS_USER" ]; then
		docker_args="--user $RUN_AS_USER $docker_args"
	fi

	echo "Creating '$container_name' container..."

	docker run --name "$container_name" $docker_args

	if [ "$?" -ne 0 ]; then
		echo "Failed to run container '$container_name"
		return 1
	fi
}

image_build() {
	if [ "$#" -lt 2 ]; then
		echo "Missing image tag and build context."
		return 1
	fi

	image_tag=$1
	build_context=$2

	shift 2

	if [ -n "$CHECK_IF_EXISTS" ] && docker_obj_exists $image_tag image; then
		return 0
	fi

	echo "Building '$image_tag' at $build_context..."
	docker build --tag $image_tag $@ $no_cache_opt $build_context
}

image_push() {
	if [ "$#" -eq 0 ]; then
		echo "Missing image tags to push."
		return 1
	fi

	for tag in $@; do
		docker push $tag
	done
}

image_tag() {
	if [ "$#" -lt 2 ]; then
		echo "At least two parameters are need to tag a image."
		return 1
	fi

	base_tag="$1"
	shift

	for tag in $@; do
		if [ "$tag" != "$base_tag" ]; then
			docker tag $base_tag $tag
			echo "Tagged '$base_tag' as '$tag'"
		fi
	done
}

docker_find_id() {
	[ -z "$1" ] && return 0

	docker ps --all --quiet --no-trunc --filter name=$1 >&1
}

docker_obj_create() {
	if [ -n "$FORCE_OPERATION" ] && docker_obj_exists "$1"; then
		docker_obj_delete "$1"
	fi

	docker $OBJECT_TYPE create "$1" > /dev/null 2>&1
}

docker_obj_exists() {
	[ -z "$1" ] && return 1

	_id=$1
	[ -n "$2" ] && _type=$2 || _type=$OBJECT_TYPE

	if [ -n "$_type" ]; then
		docker inspect --type $_type $_id > /dev/null 2>&1
	else
		docker inspect $_id > /dev/null 2>&1
	fi
}

docker_obj_delete() {
	if [ -n "$CHECK_IF_EXISTS" ] && ! docker_obj_exists "$1"; then
		return
	fi

	if [ -n "$FORCE_OPERATION" ]; then
		docker $OBJECT_TYPE rm --force "$1" > /dev/null 2>&1
	else
		docker $OBJECT_TYPE rm "$1" > /dev/null 2>&1
	fi
}

while getopts "bcdefinNpqs:t:Tx" opt; do
	case $opt in
		b) BUILD_IMAGE=1 ;;
		c) CREATE_OBJECT=1 ;;
		d) DELETE_OBJECT=1 ;;
		e) CHECK_IF_EXISTS=1 ;;
		f) FORCE_OPERATION=1 ;;
		i) FIND_OBJECT_ID=1 ;;
		n) FIND_OBJECT_NAME=1 ;;
		N) no_cache_opt='--no-cache' ;;
		p) PUSH_IMAGES=1 ;;
		q) QUIET_MODE=1 ;;
		s) CONTAINER_STATE=$OPTARG ;;
		t) OBJECT_TYPE=$OPTARG ;;
		T) TAG_IMAGES=1 ;;
		x) CONTAINER_RUN=1 ;;
	esac
done

shift $((OPTIND-1))

if [ -n "$BUILD_IMAGE" ]; then
	image_build $@
elif [ -n "$CREATE_OBJECT" ]; then
	docker_obj_create "$1"
elif [ -n "$DELETE_OBJECT" ]; then
	docker_obj_delete "$1"
elif [ -n "$FIND_OBJECT_ID" ]; then
	docker_find_id "$1"
elif [ -n "$FIND_OBJECT_NAME" ]; then
	echo ""
elif [ -n "$CONTAINER_STATE" ]; then
	container_set_state "$1" $CONTAINER_STATE
elif [ -n "$CONTAINER_RUN" ]; then
	container_run $@
elif [ -n "$PUSH_IMAGES" ]; then
	image_push $@
elif [ -n "$TAG_IMAGES" ]; then
	image_tag $@
elif [ -n "$CHECK_IF_EXISTS" ]; then
	docker_obj_exists "$1"
fi

