#!/bin/sh

container_set_state() {
	[ -z "$1" ] && return 1

	_container_id=$1

	_state=$2

	case $_state in
		running | stopped )
			[ "$_state" = running ] && _state_cond=true || _state_cond=false
			[ "$_state_cond" = true ] && _rev_state_cond=false || _rev_state_cond=true

			if ! docker_obj_exists $_container_id; then
				return 1
			fi

			_is_running=$(docker inspect -f '{{.State.Running}}' $_container_id 2>&1)

			if [ "$_is_running" = "$_rev_state_cond" ]; then
				case $_state in
					running)
						docker start $_container_id > /dev/null 2>&1
						;;
					stopped)
						docker stop $_container_id > /dev/null 2>&1
						;;
				esac

				sleep 10
			fi

			_is_running=$(docker inspect -f '{{.State.Running}}' $_container_id 2>&1)

			[ "$_is_running" = "$_state_cond" ] && return 0 || return 1
			;;

		*) return 1 ;;
	esac
}

container_run() {
	[ -z "$1" ] && return 1

	container_name="$1"
	shift

	OBJECT_TYPE=container

	if [ -n "$CHECK_IF_EXISTS" ]; then
		container_id=$(docker_find_id "$1")

		if [ -n "$container_id" ]; then
			echo "Starting '$container_name' container..."
			container_set_state "$container_id" running

			if [ "$?" -ne 0 ]; then
				echo "Failed to start container '$container_id'"
			else
				return
			fi
		fi
	fi

	if docker_obj_exists "$container_name"; then
		if [ -z "$FORCE_OPERATION" ]; then
			echo "Container '$container_name' already exists"
			return 1
		fi

		docker_obj_delete "$container_name"
	fi

	docker_args="$@"

	if [ -n "$RUN_AS_USER" ]; then
		docker_args="--user $RUN_AS_USER $docker_args"
	fi

	echo "Creating '$container_name' container..."

	docker_run_result=$(docker run --detach --name "$container_name" $docker_args)

	if [ "$?" -ne 0 ]; then
		echo "Failed to run container '$container_name"
		return 1
	fi
}

image_build() {
	_image_tag=$1
	_df_dir=$2

	_build_args="--tag $_image_tag"

	if [ -n "$BUILD_IMAGES" ] || ! docker_obj_exists $_image_tag image; then
		[ -z "$BUILD_NO_CACHE" ] && _build_args="$_build_args --no-cache"

		#msg "Building '$_image_tag' at $_df_dir..."
		echo "Building '$_image_tag' at $_df_dir..."
		docker build --tag $_image_tag $_df_dir
	fi
}

docker_find_id() {
	[ -z "$1" ] && return 0

	docker ps --all --quiet --no-trunc --filter name=$1 >&1
}

docker_obj_create() {
	if [ -n "$FORCE_OPERATION" ] && docker_obj_exists "$1"; then
		docker_obj_delete "$1"
	fi

	docker $OBJECT_TYPE create "$1" > /dev/null 2>&1
}

docker_obj_exists() {
	[ -z "$1" ] && return 1

	_id=$1
	[ "$#" -eq 2 ] && _type=$2 || _type=$OBJECT_TYPE

	if [ -n "$_type" ]; then
		docker inspect --type $_type $_id > /dev/null 2>&1
	else
		docker inspect $_id > /dev/null 2>&1
	fi
}

docker_obj_delete() {
	if [ -n "$CHECK_IF_EXISTS" ] && ! docker_obj_exists "$1"; then
		return
	fi

	if [ -n "$FORCE_OPERATION" ]; then
		docker $OBJECT_TYPE rm --force "$1" > /dev/null 2>&1
	else
		docker $OBJECT_TYPE rm "$1" > /dev/null 2>&1
	fi
}

while getopts "bcdefinNqs:t:x" opt; do
	case $opt in
		b) BUILD_IMAGE=1 ;;
		c) CREATE_OBJECT=1 ;;
		d) DELETE_OBJECT=1 ;;
		e) CHECK_IF_EXISTS=1 ;;
		f) FORCE_OPERATION=1 ;;
		i) FIND_OBJECT_ID=1 ;;
		n) FIND_OBJECT_NAME=1 ;;
		N) NO_CACHE=1 ;;
		q) QUIET_MODE=1 ;;
		s) CONTAINER_SET_STATE=$OPTARG ;;
		t) OBJECT_TYPE=$OPTARG ;;
		x) CONTAINER_RUN=1 ;;
	esac
done

shift $((OPTIND-1))

if [ -n "$BUILD_IMAGE" ]; then
	image_build "$1" "$2"
elif [ -n "$CREATE_OBJECT" ]; then
	docker_obj_create "$1"
elif [ -n "$DELETE_OBJECT" ]; then
	docker_obj_delete "$1"
elif [ -n "$FIND_OBJECT_ID" ]; then
	docker_find_id "$1"
elif [ -n "$FIND_OBJECT_NAME" ]; then
	echo ""
elif [ -n "$CONTAINER_SET_STATE" ]; then
	container_set_state "$1"
elif [ -n "$CONTAINER_RUN" ]; then
	container_run $@
elif [ -n "$CHECK_IF_EXISTS" ]; then
	docker_obj_exists "$1"
fi

