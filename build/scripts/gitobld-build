#!/bin/sh

set -e

if [ -f "$GITOBLD_COMMON" ]; then
	. "$GITOBLD_COMMON"
fi

build_image() {
	image_id="$1"

	build_args="--network $GITOBLD_NETWORK"

	if [ "$image_id" = base ]; then
		[ -n "$REPOSITORY" ] && build_args="$build_args --build-arg REPOSITORY=$REPOSITORY"
		[ -n "$PUBKEY_URL" ] && build_args="$build_args --build-arg PUBKEY_URL=$PUBKEY_URL"

		image_tag="$base_image_tag"
		build_context='base/'
	else
		image_tag=$(gitobld-packages -T $username_opt "$image_id")

		if [ -z "$image_tag" ]; then
			error "Invalid tool name '$image_id'"
			return 1
		fi

		if ! gitobld-packages -de "$image_id"; then
			error "No tool with '$image_id' name at library directory."
			return 1
		fi

		build_context='library/'"$image_id"
	fi

	[ -n "$BUILD_NO_CACHE" ] && build_args="$build_args --no-cache"

	msg "Building Docker image for '$image_id'..."
	gitobld-docker -bf "$image_tag" "$build_context" $build_args
}

usage() {
	cat <<-EOF
		Usage: $program [OPTION]... all | base | TOOL...

		Build GITO images

		Options:
		    -b  Rebuild 'apk-server' image, when using '-S' flag
		    -d  Set directory with Alpine ports.
		    -h  Show this help
		    -k  Set private key path
		    -l  Set directory with tools.
		    -L  Set local apk repository path
		    -N  Do not use cache when building the image
		    -r  Build Alpine packages for tools
		    -R  Set apk repository for base image
		    -S  Run local server for apks
		    -p  Set public key path
		    -P  Set public key url, when building base image
		    -u  Set user name for image tags
		    -U  Set user to run 'abuild' and 'apk-server' images
	EOF

	exit 0
}

while getopts "bd:hk:Kl:L:NrR:p:P:Su:U:" opt; do
	case $opt in
		b) rebuild_image_opt='-b' ;;
		d) PORTS_DIRECTORY=$OPTARG ;;
		h) usage ;;
		k) PRIVKEY_PATH=$OPTARG ;;
		l) LIBRARY_DIRECTORY=$OPTARG ;;
		L) repository_path_opt='-R '"$OPTARG"; build_output_opt='-o '"$OPTARG" ;;
		N) BUILD_NO_CACHE=1 ;;
		r) build_apks=1 ;;
		R) REPOSITORY="$OPTARG" ;;
		S) run_server=1 ;;
		p) PUBKEY_PATH=$OPTARG ;;
		P) PUBKEY_URL=$OPTARG ;;
		u) username_opt='-u '"$OPTARG" ;;
		U) container_user_opt='-U '"$OPTARG" ;;
	esac
done

shift $((OPTIND-1))

export PORTS_DIRECTORY
export LIBRARY_DIRECTORY

export PRIVKEY_PATH
export PUBKEY_PATH

if [ "$#" -eq 0 ]; then
	die "No tools passed to '$program' command."
fi

[ "$1" = all ] && set -- base $(gitobld-packages -L)

base_image_tag=${BASE_IMAGE_TAG:-gitobioinformatics/gito:3.8}

if [ -z "$PUBKEY_URL" ] && [ -n "$run_server" ]; then
	PUBKEY_URL='http://'"$APK_SERVER_HOST"'/'"${PUBKEY_PATH##*/}"
fi

packages=$(echo "$@" | sed -e 's/base//')

if [ -n "$build_apks" ] && [ -n "$packages" ]; then
	gitobld-apk-build -r \
		$build_output_opt $rebuild_image_opt $container_user_opt $packages
fi

if [ -n "$run_server" ]; then
	gitobld-apk-server $rebuild_image_opt $repository_path_opt
fi

for image in $@; do
	build_image "$image"
done

[ -n "$run_server" ] && gitobld-apk-server -d

