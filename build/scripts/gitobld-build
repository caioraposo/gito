#!/bin/sh

set -e

if [ -f "$GITOBLD_COMMON" ]; then
	. "$GITOBLD_COMMON"
fi

build_image() {
	image_id="$1"

	if [ "$image_id" = base ]; then
		[ -n "$PKG_REPOSITORY" ] && build_args="$build_args --build-arg PKG_REPOSITORY=$PKG_REPOSITORY"
		[ -n "$PKG_PUBKEY_URL" ] && build_args="$build_args --build-arg PKG_PUBKEY_URL=$PKG_PUBKEY_URL"

		image_tag="$base_image_tag"
		build_context='base/'
	else
		image_tag=$(gitobld-packages -T $username_opt $image_id)

		if [ -z "$image_tag" ]; then
			error "Invalid tool name '$image_id'"
			return 1
		fi

		if ! gitobld-packages -de $image_id; then
			error "No tool with '$image_id' name at library directory."
			return 1
		fi

		build_context='library/'"$image_id"
	fi

	build_args="$build_args --network $GITOBLD_NETWORK"

	[ -n "$BUILD_NO_CACHE" ] && build_args="$build_args --no-cache"

	msg "Building Docker image for '$image_id'..."
	gitobld-docker -bf "$image_tag" "$build_context" $build_args

	unset build_args
}

usage() {
	cat <<-EOF
		Usage: $program [OPTION]... all | base | TOOL...

		Build GITO images

		Options:
		    -b  Rebuild 'apk-server' image, when using '-S' flag
		    -d  Set directory with Alpine ports.
		    -e  Set apk repository for tools
		    -h  Show this help
		    -k  Set private key path
		    -N  Do not use cache when building the image
		    -o  Set output directory, when using '-R' flag
		    -r  Build Alpine packages for tools
		    -R  Set package repository path, when building base image
		    -S  Run local server for apks
		    -p  Set public key url, when building base image
		    -P  Set public key path
		    -u  Set user name for image tags
		    -U  Set user to run 'abuild' and 'apk-server' images
	EOF

	exit 0
}

while getopts "bd:e:hk:KNo:rR:PSu:U:" opt; do
	case $opt in
		b) rebuild_image_opt='-b' ;;
		d) PKG_DIRECTORY=$OPTARG ;;
		e) PKG_REPOSITORY=$OPTARG ;;
		h) usage ;;
		k) PKG_PRIVKEY_PATH=$OPTARG ;;
		N) BUILD_NO_CACHE=1 ;;
		o) BUILD_OUTPUT_DIR=$OPTARG ;;
		r) BUILD_APKS=1 ;;
		R) repository_path="$OPTARG" ;;
		S) RUN_SERVER=1 ;;
		p) PKG_PUBKEY_URL=$OPTARG ;;
		P) PKG_PUBKEY_PATH=$OPTARG ;;
		u) username_opt='-u '"$OPTARG" ;;
		U) container_user_opt='-U '"$OPTARG" ;;
	esac
done

shift $((OPTIND-1))

if [ "$#" -eq 0 ]; then
	die "No tools passed to '$program' command."
fi

[ "$1" = all ] && set -- base $(gitobld-packages -L)

base_image_tag=${BASE_IMAGE_TAG:-gitobioinformatics/gito:3.8}

if [ -z "$PKG_PUBKEY_URL" -a -n "$RUN_SERVER" ]; then
	PKG_PUBKEY_URL='http://'"$APK_SERVER_HOST"'/'"${PKG_PUBKEY_PATH##*/}"
fi

if [ -n "$BUILD_OUTPUT_DIR" -a -z "$repository_path" ]; then
	repository_path=$BUILD_OUTPUT_DIR
fi

packages=$(echo "$@" | sed -e 's/base//')

if [ -n "$BUILD_APKS" ] && [ -n "$packages" ]; then
	gitobld-apk-build -r $container_user_opt $packages
fi

if [ -n "$RUN_SERVER" ]; then
	gitobld-apk-server $rebuild_image_opt
fi

for image in $@; do
	build_image "$image"
done

[ -n "$RUN_SERVER" ] && gitobld-apk-server -d

