#!/bin/sh

set -e

if [ -f "$GITOBLD_COMMON" ]; then
	. "$GITOBLD_COMMON"
fi

apply_patch() {
	target="$1"

	if [ -n "$ignore_pattern" ] && echo "$target" | grep -qE "$ignore_pattern"; then
		echo "File '$target' matched pattern, skipping..."
		return
	fi

	if [ -f "$target" ]; then
		tee "$target".new | diff - $target > "$target".diff || true

		if [ -s "$target".diff ]; then
			patch -i "$target".diff "$target".new

			rm "$target"
			mv "$target".new $target

			echo "Added $(basename $target)"
		else
			rm "$target".new
		fi

		rm "$target".diff
	else
		cat > $target
		echo "Added $(basename $target)"
	fi
}

update_tool_df() {
	[ -z "$1" ] && return 1

	tool_id=$1

	if ! gitobld-packages -ae $tool_id; then
		error "Missing package for '$tool_id' at ports directory."
		return 1
	fi

	tool_dir=library/$tool_id

	if [ -n "$force_update" ]; then
		rm -rf $tool_dir
	fi

	tool_name=$(gitobld-packages -dq 'name' $tool_id)

	tool_name=${tool_name:-$tool_id}
	tool_version=${tool_version:-$(gitobld-packages -aq 'pkgver' $tool_id)}
	tool_homepage=${tool_homepage:-$(gitobld-packages -aq 'url' $tool_id)}

	msg "Updating '$tool'..."

	mkdir -p $tool_dir
	sed \
		-e 's/%%TOOL_ID%%/'"$tool_id"'/g' \
		-e 's/%%TOOL_NAME%%/'"$tool_name"'/g' \
		-e 's/%%ALPINE_VERSION%%/'"$ALPINE_VERSION"'/g' \
		-e 's/%%TOOL_VERSION%%/'"$tool_version"'/g' \
		-e 's,%%TOOL_HOMEPAGE%%,'"$tool_homepage"',g' \
		-e 's,%%PKG_PUBKEY_URL%%,'"$PKG_PUBKEY_URL"',g' \
		-e 's,%%PKG_PUBKEY%%,'"$PKG_PUBKEY"',g' \
		-e 's,%%PKG_REPOSITORY%%,'"$PKG_REPOSITORY"',g' \
		build/template/Dockerfile.template \
		| apply_patch $tool_dir/Dockerfile

	gitobld-packages -ds 'version' -v "$tool_version" "$tool_id"

	cat build/template/docker-entrypoint.sh | apply_patch "$tool_dir"/docker-entrypoint.sh
	chmod +x "$tool_dir"/docker-entrypoint.sh

	badges="[![Version](https://img.shields.io/badge/Version-$tool_version-blue.svg)]()"

	sed \
		-e 's/%%TOOL_ID%%/'"$tool_id"'/g' \
		-e 's/%%TOOL_NAME%%/'"$tool_name"'/g' \
		-e 's/"%%TOOL_VERSION%%/'"$tool_version"'/g' \
		-e 's,%%TOOL_HOMEPAGE%%,'"$tool_homepage"',g' \
		-e 's,%%TOOL_BADGES%%,'"$badges"',g' \
		build/template/README.md \
		| apply_patch $tool_dir/README.md
}

usage() {
	cat <<-EOF
		Usage: $program [OPTION]... all | TOOL...

		Update dockerfiles using a template

		Options:
		    -a  Set alpine version
		    -f  Force update
		    -h  Show this help
		    -I  Ignore file where names match pattern
		    -k  Set public key url for apks
		    -r  Set apk repository for tools
	EOF

	exit 0
}

ALPINE_VERSION=3.8

while getopts "a:fhI:k:r:" opt; do
	case $opt in
		a) ALPINE_VERSION=$OPTARG ;;
		f) force_update=1 ;;
		h) usage ;;
		I) ignore_pattern=$OPTARG ;;
		k) PKG_PUBKEY_URL=$OPTARG ;;
		r) PKG_REPOSITORY=$OPTARG ;;
	esac
done

shift $((OPTIND-1))

if [ "$#" -eq 0 ]; then
	die "No tools passed to '$program' command."
fi

[ "$1" = all ] && set -- $(gitobld-packages -L)

for tool in $@; do
	update_tool_df "$tool"
done

