#!/bin/sh

set -e

if [ -f "$GITOBLD_COMMON" ]; then
	. "$GITOBLD_COMMON"
fi

apply_patch() {
	target="$1"

	if [ -n "$ignore_pattern" ] && echo "$target" | grep -qE "$ignore_pattern"; then
		echo "File '$target' matched pattern, skipping..."
		return
	fi

	if [ -n "$force_update" ]; then
		rm "$target"
	fi

	if [ -f "$target" ]; then
		tee "$target".new | diff - "$target" > "$target".diff || true

		if [ -s "$target".diff ]; then
			patch -i "$target".diff "$target".new

			rm "$target"
			mv "$target".new $target

			echo 'Added '"$(basename $target)"
		else
			rm "$target".new
		fi

		rm "$target".diff
	else
		cat > "$target"
		echo 'Added '"$(basename $target)"
	fi
}

update_base_df() {
	if [ -z "$REPOSITORY" ]; then
		error "Missing package repository for base image."
		return 1
	else
		REPOSITORY='"'"$REPOSITORY"'"'
	fi

	if [ -z "$PUBKEY_URL" ]; then
		error "Missing public key url for base image."
		return 1
	else
		PUBKEY_URL='"'"$PUBKEY_URL"'"'
	fi

	msg "Updating 'base'..."

	mkdir -p base
	sed \
		-e 's/%%ALPINE_VERSION%%/'"$ALPINE_VERSION"'/g' \
		-e 's,%%REPOSITORY%%,'"$REPOSITORY"',g' \
		-e 's,%%PUBKEY_URL%%,'"$PUBKEY_URL"',g' \
		build/template/Dockerfile-base.template \
		| apply_patch base/Dockerfile
}

update_tool_df() {
	[ -z "$1" ] && return 1

	tool_id="$1"

	if ! gitobld-packages -ae $tool_id; then
		error "Missing package for '$tool_id' at '$PORTS_DIRECTORY' directory."
		return 1
	fi

	tool_dir="$LIBRARY_DIRECTORY"/"$tool_id"

	if gitobld-packages -de "$tool_id"; then
		tool_name=$(gitobld-packages -dq 'name' $tool_id)
	fi

	tool_name=${tool_name:-$tool_id}
	tool_version=$(gitobld-packages -aq 'pkgver' $tool_id)
	tool_rel=$(gitobld-packages -aq 'pkgrel' $tool_id)
	tool_homepage=$(gitobld-packages -aq 'url' $tool_id)

	msg "Updating '$tool_id'..."

	mkdir -p $tool_dir
	sed \
		-e 's/%%TOOL_ID%%/'"$tool_id"'/g' \
		-e 's/%%TOOL_NAME%%/'"$tool_name"'/g' \
		-e 's/%%ALPINE_VERSION%%/'"$ALPINE_VERSION"'/g' \
		-e 's/%%TOOL_VERSION%%/'"$tool_version"'/g' \
		-e 's/%%TOOL_REL%%/'"$tool_rel"'/g' \
		-e 's,%%TOOL_HOMEPAGE%%,'"$tool_homepage"',g' \
		build/template/Dockerfile-tool.template \
		| apply_patch $tool_dir/Dockerfile

	gitobld-packages -ds 'version' -v "$tool_version" "$tool_id"

	cat build/template/docker-entrypoint.sh | apply_patch "$tool_dir"/docker-entrypoint.sh
	chmod +x "$tool_dir"/docker-entrypoint.sh

	badges="[![Version](https://img.shields.io/badge/Version-$tool_version-blue.svg)]()"

	sed \
		-e 's/%%TOOL_ID%%/'"$tool_id"'/g' \
		-e 's/%%TOOL_NAME%%/'"$tool_name"'/g' \
		-e 's/"%%TOOL_VERSION%%/'"$tool_version"'/g' \
		-e 's,%%TOOL_HOMEPAGE%%,'"$tool_homepage"',g' \
		-e 's,%%TOOL_BADGES%%,'"$badges"',g' \
		build/template/README.md \
		| apply_patch $tool_dir/README.md

	unset tool_name
}

usage() {
	cat <<-EOF
		Usage: $program [OPTION]... all | base | TOOL...

		Update dockerfiles using a template

		Options:
		    -a  Set alpine version
		    -d  Search for apks on this directory
		    -f  Force update
		    -h  Show this help
		    -I  Ignore file where names match pattern
		    -k  Set public key url to verfiy apk signature
		        Used when building the base image
		    -l  Set directory with tools
		    -r  Set apk repository for tools
		        Used when building the base image
	EOF

	exit 0
}

while getopts "a:d:fhI:k:l:r:" opt; do
	case $opt in
		a) ALPINE_VERSION=$OPTARG ;;
		d) PORTS_DIRECTORY=$OPTARG ;;
		f) force_update=1 ;;
		h) usage ;;
		I) ignore_pattern=$OPTARG ;;
		k) PUBKEY_URL=$OPTARG ;;
		l) LIBRARY_DIRECTORY=$OPTARG ;;
		r) REPOSITORY=$OPTARG ;;
	esac
done

shift $((OPTIND-1))

export PORTS_DIRECTORY
export LIBRARY_DIRECTORY

PUBKEY_URL=${PUBKEY_URL:-'http://'"$APK_SERVER_HOST"'/'"${PUBKEY_PATH##*/}"}
REPOSITORY=${REPOSITORY:-'http://'"$APK_SERVER_HOST"'/packages/'"$(basename $PORTS_DIRECTORY)"}

if [ "$#" -eq 0 ]; then
	die "No tools passed to '$program' command."
fi

[ "$1" = all ] && set -- base $(gitobld-packages -L)

for image in $@; do
	if [ "$image" = base ]; then
		update_base_df
	else
		update_tool_df "$image"
	fi
done

