#!/bin/sh

gen_split() {
	if [ -z "$prefix" ]; then
		return
	fi

	cat <<-EOF
		$1() {
			pkgdir="\$pkgdir/$prefix" default_${1}

			cd "\$subpkgdir"
			for i in */; do
				mkdir -p "\$subpkgdir"'$prefix'
				mv "\$i" "\$subpkgdir"'$prefix/'"\$i"
			done
		}
	EOF
}

do_convert() {
	local archive="$1"

	if [ -z "$name" ]; then
		if [ "$archive" != '-' ]; then
			name=${archive%.*}
		else
			echo 'Missing package name'
			return 1
		fi
	fi

	if [ -z "$repository_name" ]; then
		repository_name='aports'
	fi

	if [ -z "$version" ]; then
		version=$(date +%Y.%m.%d)
	fi

	if [ -z "$release" ]; then
		release=0
	fi

	if [ -z "$description" ]; then
		description="Package for '$name', generated using conv2apk"
	fi

	if [ -z "$url" ]; then
		echo 'Missing package url'
		exit 1
	fi

	if [ -z "$arch" ]; then
		if [ -n "$APK_DEFAULT_ARCH" ]; then
			arch="$APK_DEFAULT_ARCH"
		else
			arch='noarch'
		fi
	fi

	if [ -z "$license" ]; then
		license='Unknown'
	fi

	if [ -z "$src_type" ] || [ "$src_type" = 'auto' ]; then
		if [ -d "$archive" ]; then
			src_type=dir
		else
			case "$archive" in
				*.tar | *.tar.*) src_type='tar' ;;
				*.zip) src_type='zip' ;;
			esac
		fi
	fi

	# Prepend the package name to subpackages
	subpackages=$(echo "$splits" | xargs \
		| sed -e '/^$/!s/[^ ]* */'"$name"'-&/g')

	local tmpdir=$(mktemp -d)
	local startdir="$tmpdir"/"$repository_name"/"$name"
	local srcdir="$startdir"/src
	local builddir="$srcdir/$name-$version"

	mkdir -p "$startdir" "$srcdir" "${builddir}$prefix"

	case "$src_type" in
		dir)
			if [ -z "$archive" ]; then
                archive=$PWD
            elif [ "$archive" = '-' ]; then
				echo 'Cannot read directory from standard input!' >&2
				exit 1
            elif [ ! -d "$archive" ]; then
                echo "Directory don't exists: $archive"
                return 1
            fi

			cp -r "$archive"/* ${builddir}$prefix
			;;
		tar)
			if [ -z "$archive" ] || [ "$archive" = '-' ]; then
				archive="/dev/stdin"
            elif [ ! -f "$archive" ]; then
                echo "Archive don't exists: $archive"
                return 1
			fi

			local compress_opt

			if [ -n "$compress" ]; then
				case "$compress" in
					z | j | J)
						compress_opt="-$compress";;
					gzip | bzip2 | xz)
						compress_opt="--$compress";;
				esac
			fi

			tar xf "$archive" -C "${builddir}$prefix" "$compress_opt"
			;;
		zip)
			if [ -z "$archive" ] || [ "$archive" = '-' ]; then
				archive="/dev/stdin"
            elif [ ! -f "$archive" ]; then
                echo "Archive don't exists: $archive"
                return 1
            fi

			unzip -q -d "${builddir}$prefix" "$archive" $exclude_opt
			;;
        *)
            echo "Invalid type for source pacakge: $src_type" >&2
            exit 1
            ;;
	esac

	cd "${builddir}$prefix"
    set -f -o noglob

    # Use ls instead of '*' as glob is disabled
	for pattern in $exclude; do
        find $(ls) -path "$pattern" -exec rm -rf {} \; > /dev/null 2>&1
	done

    set -f +o noglob
	cd $OLDPWD

	cat <<-EOF > "$startdir"/APKBUILD
		pkgname="$name"
		pkgver="$version"
		pkgrel="$release"
		pkgdesc="$description"
		url="$url"
		arch="$arch"
		license="$license"
		depends="$depends"
		subpackages="$subpackages"
		options="!check $options"

		builddir="\$srcdir/\$pkgname-\$pkgver"

		$(for sub in $splits; do gen_split ${sub}; done)

		package() {
			mkdir -p "\$pkgdir"
			mv "\$builddir"/* "\$pkgdir"
		}
	EOF

	cat "$startdir"/APKBUILD

	cd "$startdir"
	abuild rootpkg index

	rm -rf "$tmpdir"
}

usage() {
	cat <<-EOF
		Usage: conv2apk [OPTIONS] file

		Convert a tar, zip or directory into Alpine Linux package

		Options:
		  -a, --arch          Set package machine architecture
		  -c, --compress      Set compression method of tarfile
		                      Useful when reading from stdin
		  -d, --desc          Set package description
		  -D, --depends       Add dependency to package
		  --dev               Add development subpackage
		  --doc               Add documentation subpackage
		  -h, --help          Show this help
		  -l, --license       Set package license
		  -n, --name          Set package name
		  --no-strip          Don't strip binaries from package
		  --no-tracedeps      Don't automatically find dependencies
		  --prefix            Add prefix
		  -r, --release	      Set package release
		  -R, --repository    Set package repository (default: aports)
		  -t, --type  {auto,dir,tar,zip}
		                      Set source type (default: auto).
		  -u, --url           Set package url
		  -v, --version       Set package version
		  -x, --exclude	      Ignore this pattern on archive
	EOF
}

cli_options() {
	getopt -o a:c:d:D:h:l:n:r:R:t:u:v:x: \
		-l arch: \
		-l compress: \
		-l desc: \
		-l depends: \
		-l dev \
		-l doc \
		-l help: \
		-l license: \
		-l name: \
		-l no-strip \
		-l no-tracedeps \
		-l rel: \
		-l repository: \
		-l prefix: \
		-l type: \
		-l url: \
		-l version: \
		-l exclude: \
		-n 'conv2apk' -- "$@"
}

opts=$(cli_options "$@")

if [ "$?" -ne 0 ]; then
	usage
	exit 1
fi

eval set -- "$opts"

arch=
compress=
description=
depends=
splits=
license=
name=
options=
repository_name=
prefix=
src_type=
url=
version=
exclude=

while true; do
	case $1 in
		-a|--arch)
			arch="$2"
			shift
			;;
        -c | --compress)
            compress="$2"
            shift
            ;;
		-d|--description)
			description="$2"
			shift
			;;
		-D|--depends)
			depends="$2 $depends"
			shift
			;;
		--dev | --doc) splits="$splits ${1#--}" ;;
		-h|--help) usage; exit ;;
		-l|--license)
			license="$2"
			shift
			;;
		-n|--name)
			name="$2"
			shift
			;;
		--no-*) options="$options !${1#--no-}" ;;
		-r|--release)
			release="$2"
			shift
			;;
		-R|--repository-name)
			repository_name=$2
			shift
			;;
		--prefix)
			prefix="$2"
			shift
			;;
        -t|--type)
            src_type="$2"
            shift
            ;;
		-u|--url)
			url="$2"
			shift
			;;
		-v|--version)
			version="$2"
			shift
			;;
		-x|--exclude)
			exclude="$exclude $2"
			shift
			;;
		--) shift; break ;;
		*) exit 1 ;;
	esac

	shift
done

do_convert "$1"
